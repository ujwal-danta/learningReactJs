setState

-Never modify state directly and always make use of setState
-takes an object as parameter


import React, { Component } from 'react'

class setstate extends Component {
    constructor(props) {
        super(props)
    
        this.state = {
             count : 0
        }
    }
        increment(){
        this.setState({
            count : this.state.count+1
        })
        console.log(this.state.count)
    }
render() {
        return (
            <div>
              <p>count = {this.state.count} </p>  
              <button onClick={()=>this.increment()}>Increment</button>
            </div>
        )
    }
}


-Code has to be executed after the state has been updated ? place the code in the callback function 
which is the second argument to setState method.

example : -


import React, { Component } from 'react'

class setstate extends Component {
    constructor(props) {
        super(props)
    
        this.state = {
             count : 0
        }
    }
    increment(){
        this.setState(
            {
            count : this.state.count+1
        },
            ()=>{
                console.log("Callback value - ",this.state.count)
            }
        
        )
      
    }

  render() {
        return (
            <div>
              <p>count = {this.state.count} </p>  
              <button onClick={()=>this.increment()}>Increment</button>
            </div>
        )
    }
}

export default setstate



-When you have to modify state based on the previous state value, pass in a function as an argument
instead of an object
import React, { Component } from 'react'

class setstate extends Component {
    constructor(props) {
        super(props)
    
        this.state = {
             count : 0
        }
    }
    increment(){
        this.setState(prevState => ({
            count : prevState.count +1
        }),()=>{
            console.log("callback count " , this.state.count)
        })
        console.log(this.state.count)
    }
    incrementFive(){
        this.increment()
        this.increment()
        this.increment()
        this.increment()
        this.increment()
    }
    render() {
        return (
            <div>
              <p>count = {this.state.count} </p>  
              <button onClick={()=>this.incrementFive()}>Increment</button>
            </div>
        )
    }
}

export default setstate


