import React, { Component } from 'react'

 class RefsDemo extends Component {
     constructor(props) {
         super(props)
         this.inputRef = React.createRef();
     }
     componentDidMount(){
         this.inputRef.current.focus();
     }
     clickHandler = ()=>{
         alert( this.inputRef.current.value)
     }
    render() {
        return (
            <div>
                <input type="text" ref={this.inputRef}/>
                <button onClick={this.clickHandler}>click</button>
            </div>
        )
    }
}

export default RefsDemo


import React, { Component } from 'react'
import ChildRef from './childRef'
 class parentRef extends Component {
     constructor(props) {
         super(props)
         this.inputRef = React.createRef();
     }
     FocusTextInput=()=>{
         this.inputRef.current.focusText()
     }
    render() {
        return (
            <div>
               <ChildRef ref={this.inputRef}/>
               <button onClick={this.FocusTextInput}>Focus Text</button> 
            </div>
        )
    }
}

export default parentRef



import React, { Component } from 'react'

 class childRef extends Component {
     constructor(props) {
         super(props)
         this.inputRefChild = React.createRef();
     }
     focusText=()=>{
     this.inputRefChild.current.focus();
     }
    render() {
        return (
            <div>
                <input type="text" ref={this.inputRefChild} />
            </div>
        )
    }
}

export default childRef
